'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace dorme2
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="RequestLabelSoap", [Namespace]:="http://tempuri.org/BecWebService/RequestLabel")>  _
    Partial Public Class RequestLabel
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private GetSAPLabelDataOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintLabel_P23OperationCompleted As System.Threading.SendOrPostCallback
        
        Private cordialValueField As Cordial
        
        Private ViewErrorLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private saveSerializedProductsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LogEventsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintSkidSummaryOnlyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConvertToCustomerPartNumbertttOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PrintSkidSummaryOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RequiresSkidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetShipDestination_WebmethodOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetStandardPackDetailsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPartNumberOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GotDLOCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOfflinePrinterNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GotLabelsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private testWebMethodsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AbortSkidOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMachineIDOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetWhatsScheduledOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSkidRecordsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReprintICSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteICSBufferOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteScheduledRecordsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetMESPartIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ShowVersionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EnterLogOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveInpectionRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetQualityProblemCodesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RunsAtOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UnReserveSerialsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://usmsbrk-ap17.northamerica.delphiauto.net/BECWebService_UEC_BDU_Test/Reques"& _ 
                "tLabel.asmx"
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Property CordialValue() As Cordial
            Get
                Return Me.cordialValueField
            End Get
            Set
                Me.cordialValueField = value
            End Set
        End Property
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event GetSAPLabelDataCompleted As GetSAPLabelDataCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintLabel_P23Completed As PrintLabel_P23CompletedEventHandler
        
        '''<remarks/>
        Public Event ViewErrorLogCompleted As ViewErrorLogCompletedEventHandler
        
        '''<remarks/>
        Public Event saveSerializedProductsCompleted As saveSerializedProductsCompletedEventHandler
        
        '''<remarks/>
        Public Event LogEventsCompleted As LogEventsCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintSkidSummaryOnlyCompleted As PrintSkidSummaryOnlyCompletedEventHandler
        
        '''<remarks/>
        Public Event ConvertToCustomerPartNumbertttCompleted As ConvertToCustomerPartNumbertttCompletedEventHandler
        
        '''<remarks/>
        Public Event PrintSkidSummaryCompleted As PrintSkidSummaryCompletedEventHandler
        
        '''<remarks/>
        Public Event RequiresSkidCompleted As RequiresSkidCompletedEventHandler
        
        '''<remarks/>
        Public Event GetShipDestination_WebmethodCompleted As GetShipDestination_WebmethodCompletedEventHandler
        
        '''<remarks/>
        Public Event GetStandardPackDetailsCompleted As GetStandardPackDetailsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPartNumberCompleted As GetPartNumberCompletedEventHandler
        
        '''<remarks/>
        Public Event GotDLOCCompleted As GotDLOCCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOfflinePrinterNameCompleted As GetOfflinePrinterNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GotLabelsCompleted As GotLabelsCompletedEventHandler
        
        '''<remarks/>
        Public Event testWebMethodsCompleted As testWebMethodsCompletedEventHandler
        
        '''<remarks/>
        Public Event AbortSkidCompleted As AbortSkidCompletedEventHandler
        
        '''<remarks/>
        Public Event SendEmailCompleted As SendEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMachineIDCompleted As GetMachineIDCompletedEventHandler
        
        '''<remarks/>
        Public Event GetWhatsScheduledCompleted As GetWhatsScheduledCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSkidRecordsCompleted As GetSkidRecordsCompletedEventHandler
        
        '''<remarks/>
        Public Event ReprintICSCompleted As ReprintICSCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteICSBufferCompleted As DeleteICSBufferCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteScheduledRecordsCompleted As DeleteScheduledRecordsCompletedEventHandler
        
        '''<remarks/>
        Public Event GetMESPartIdCompleted As GetMESPartIdCompletedEventHandler
        
        '''<remarks/>
        Public Event ShowVersionCompleted As ShowVersionCompletedEventHandler
        
        '''<remarks/>
        Public Event EnterLogCompleted As EnterLogCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveInpectionRecordCompleted As SaveInpectionRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetQualityProblemCodesCompleted As GetQualityProblemCodesCompletedEventHandler
        
        '''<remarks/>
        Public Event RunsAtCompleted As RunsAtCompletedEventHandler
        
        '''<remarks/>
        Public Event UnReserveSerialsCompleted As UnReserveSerialsCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/GetSAPLabelData", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSAPLabelData(ByVal serial_nbr As String, ByVal ship_package As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSAPLabelData", New Object() {serial_nbr, ship_package})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetSAPLabelData(ByVal serial_nbr As String, ByVal ship_package As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetSAPLabelData", New Object() {serial_nbr, ship_package}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetSAPLabelData(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSAPLabelDataAsync(ByVal serial_nbr As String, ByVal ship_package As String)
            Me.GetSAPLabelDataAsync(serial_nbr, ship_package, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSAPLabelDataAsync(ByVal serial_nbr As String, ByVal ship_package As String, ByVal userState As Object)
            If (Me.GetSAPLabelDataOperationCompleted Is Nothing) Then
                Me.GetSAPLabelDataOperationCompleted = AddressOf Me.OnGetSAPLabelDataOperationCompleted
            End If
            Me.InvokeAsync("GetSAPLabelData", New Object() {serial_nbr, ship_package}, Me.GetSAPLabelDataOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSAPLabelDataOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSAPLabelDataCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSAPLabelDataCompleted(Me, New GetSAPLabelDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/PrintLabel_P23", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintLabel_P23(ByVal dsRequest As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("PrintLabel_P23", New Object() {dsRequest})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginPrintLabel_P23(ByVal dsRequest As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PrintLabel_P23", New Object() {dsRequest}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPrintLabel_P23(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintLabel_P23Async(ByVal dsRequest As System.Data.DataSet)
            Me.PrintLabel_P23Async(dsRequest, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintLabel_P23Async(ByVal dsRequest As System.Data.DataSet, ByVal userState As Object)
            If (Me.PrintLabel_P23OperationCompleted Is Nothing) Then
                Me.PrintLabel_P23OperationCompleted = AddressOf Me.OnPrintLabel_P23OperationCompleted
            End If
            Me.InvokeAsync("PrintLabel_P23", New Object() {dsRequest}, Me.PrintLabel_P23OperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintLabel_P23OperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintLabel_P23CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintLabel_P23Completed(Me, New PrintLabel_P23CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("CordialValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/ViewErrorLog", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ViewErrorLog() As String
            Dim results() As Object = Me.Invoke("ViewErrorLog", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginViewErrorLog(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ViewErrorLog", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndViewErrorLog(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ViewErrorLogAsync()
            Me.ViewErrorLogAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ViewErrorLogAsync(ByVal userState As Object)
            If (Me.ViewErrorLogOperationCompleted Is Nothing) Then
                Me.ViewErrorLogOperationCompleted = AddressOf Me.OnViewErrorLogOperationCompleted
            End If
            Me.InvokeAsync("ViewErrorLog", New Object(-1) {}, Me.ViewErrorLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnViewErrorLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.ViewErrorLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ViewErrorLogCompleted(Me, New ViewErrorLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("CordialValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/saveSerializedProducts", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function saveSerializedProducts(ByVal SerialNbr As Long, ByVal mesMachineID As Long, ByVal SerializedList As String) As String
            Dim results() As Object = Me.Invoke("saveSerializedProducts", New Object() {SerialNbr, mesMachineID, SerializedList})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginsaveSerializedProducts(ByVal SerialNbr As Long, ByVal mesMachineID As Long, ByVal SerializedList As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("saveSerializedProducts", New Object() {SerialNbr, mesMachineID, SerializedList}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndsaveSerializedProducts(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub saveSerializedProductsAsync(ByVal SerialNbr As Long, ByVal mesMachineID As Long, ByVal SerializedList As String)
            Me.saveSerializedProductsAsync(SerialNbr, mesMachineID, SerializedList, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub saveSerializedProductsAsync(ByVal SerialNbr As Long, ByVal mesMachineID As Long, ByVal SerializedList As String, ByVal userState As Object)
            If (Me.saveSerializedProductsOperationCompleted Is Nothing) Then
                Me.saveSerializedProductsOperationCompleted = AddressOf Me.OnsaveSerializedProductsOperationCompleted
            End If
            Me.InvokeAsync("saveSerializedProducts", New Object() {SerialNbr, mesMachineID, SerializedList}, Me.saveSerializedProductsOperationCompleted, userState)
        End Sub
        
        Private Sub OnsaveSerializedProductsOperationCompleted(ByVal arg As Object)
            If (Not (Me.saveSerializedProductsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent saveSerializedProductsCompleted(Me, New saveSerializedProductsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/LogEvents", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LogEvents(ByVal logthis As String) As Boolean
            Dim results() As Object = Me.Invoke("LogEvents", New Object() {logthis})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginLogEvents(ByVal logthis As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("LogEvents", New Object() {logthis}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndLogEvents(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LogEventsAsync(ByVal logthis As String)
            Me.LogEventsAsync(logthis, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogEventsAsync(ByVal logthis As String, ByVal userState As Object)
            If (Me.LogEventsOperationCompleted Is Nothing) Then
                Me.LogEventsOperationCompleted = AddressOf Me.OnLogEventsOperationCompleted
            End If
            Me.InvokeAsync("LogEvents", New Object() {logthis}, Me.LogEventsOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogEventsOperationCompleted(ByVal arg As Object)
            If (Not (Me.LogEventsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LogEventsCompleted(Me, New LogEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/PrintSkidSummaryOnly", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintSkidSummaryOnly(ByVal SkidID As Long, ByVal PartNbr As String, ByVal CNTR As String, ByVal MachineName As String) As String
            Dim results() As Object = Me.Invoke("PrintSkidSummaryOnly", New Object() {SkidID, PartNbr, CNTR, MachineName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginPrintSkidSummaryOnly(ByVal SkidID As Long, ByVal PartNbr As String, ByVal CNTR As String, ByVal MachineName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PrintSkidSummaryOnly", New Object() {SkidID, PartNbr, CNTR, MachineName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPrintSkidSummaryOnly(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintSkidSummaryOnlyAsync(ByVal SkidID As Long, ByVal PartNbr As String, ByVal CNTR As String, ByVal MachineName As String)
            Me.PrintSkidSummaryOnlyAsync(SkidID, PartNbr, CNTR, MachineName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintSkidSummaryOnlyAsync(ByVal SkidID As Long, ByVal PartNbr As String, ByVal CNTR As String, ByVal MachineName As String, ByVal userState As Object)
            If (Me.PrintSkidSummaryOnlyOperationCompleted Is Nothing) Then
                Me.PrintSkidSummaryOnlyOperationCompleted = AddressOf Me.OnPrintSkidSummaryOnlyOperationCompleted
            End If
            Me.InvokeAsync("PrintSkidSummaryOnly", New Object() {SkidID, PartNbr, CNTR, MachineName}, Me.PrintSkidSummaryOnlyOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintSkidSummaryOnlyOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintSkidSummaryOnlyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintSkidSummaryOnlyCompleted(Me, New PrintSkidSummaryOnlyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/ConvertToCustomerPartNumberttt", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConvertToCustomerPartNumberttt(ByVal PartNumber As String) As String
            Dim results() As Object = Me.Invoke("ConvertToCustomerPartNumberttt", New Object() {PartNumber})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginConvertToCustomerPartNumberttt(ByVal PartNumber As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConvertToCustomerPartNumberttt", New Object() {PartNumber}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConvertToCustomerPartNumberttt(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConvertToCustomerPartNumbertttAsync(ByVal PartNumber As String)
            Me.ConvertToCustomerPartNumbertttAsync(PartNumber, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConvertToCustomerPartNumbertttAsync(ByVal PartNumber As String, ByVal userState As Object)
            If (Me.ConvertToCustomerPartNumbertttOperationCompleted Is Nothing) Then
                Me.ConvertToCustomerPartNumbertttOperationCompleted = AddressOf Me.OnConvertToCustomerPartNumbertttOperationCompleted
            End If
            Me.InvokeAsync("ConvertToCustomerPartNumberttt", New Object() {PartNumber}, Me.ConvertToCustomerPartNumbertttOperationCompleted, userState)
        End Sub
        
        Private Sub OnConvertToCustomerPartNumbertttOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConvertToCustomerPartNumbertttCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConvertToCustomerPartNumbertttCompleted(Me, New ConvertToCustomerPartNumbertttCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/PrintSkidSummary", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PrintSkidSummary(ByVal SerialNbr As Long) As String
            Dim results() As Object = Me.Invoke("PrintSkidSummary", New Object() {SerialNbr})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginPrintSkidSummary(ByVal SerialNbr As Long, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("PrintSkidSummary", New Object() {SerialNbr}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndPrintSkidSummary(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PrintSkidSummaryAsync(ByVal SerialNbr As Long)
            Me.PrintSkidSummaryAsync(SerialNbr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PrintSkidSummaryAsync(ByVal SerialNbr As Long, ByVal userState As Object)
            If (Me.PrintSkidSummaryOperationCompleted Is Nothing) Then
                Me.PrintSkidSummaryOperationCompleted = AddressOf Me.OnPrintSkidSummaryOperationCompleted
            End If
            Me.InvokeAsync("PrintSkidSummary", New Object() {SerialNbr}, Me.PrintSkidSummaryOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrintSkidSummaryOperationCompleted(ByVal arg As Object)
            If (Not (Me.PrintSkidSummaryCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PrintSkidSummaryCompleted(Me, New PrintSkidSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/RequiresSkid", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RequiresSkid(ByVal Plant As String, ByVal LineID As String, ByVal PKG_Code As String) As String
            Dim results() As Object = Me.Invoke("RequiresSkid", New Object() {Plant, LineID, PKG_Code})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginRequiresSkid(ByVal Plant As String, ByVal LineID As String, ByVal PKG_Code As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RequiresSkid", New Object() {Plant, LineID, PKG_Code}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRequiresSkid(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RequiresSkidAsync(ByVal Plant As String, ByVal LineID As String, ByVal PKG_Code As String)
            Me.RequiresSkidAsync(Plant, LineID, PKG_Code, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RequiresSkidAsync(ByVal Plant As String, ByVal LineID As String, ByVal PKG_Code As String, ByVal userState As Object)
            If (Me.RequiresSkidOperationCompleted Is Nothing) Then
                Me.RequiresSkidOperationCompleted = AddressOf Me.OnRequiresSkidOperationCompleted
            End If
            Me.InvokeAsync("RequiresSkid", New Object() {Plant, LineID, PKG_Code}, Me.RequiresSkidOperationCompleted, userState)
        End Sub
        
        Private Sub OnRequiresSkidOperationCompleted(ByVal arg As Object)
            If (Not (Me.RequiresSkidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RequiresSkidCompleted(Me, New RequiresSkidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/GetShipDestination_Webmethod", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetShipDestination_Webmethod(ByRef Destination As clsDestination) As String
            Dim results() As Object = Me.Invoke("GetShipDestination_Webmethod", New Object() {Destination})
            Destination = CType(results(1),clsDestination)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetShipDestination_Webmethod(ByVal Destination As clsDestination, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetShipDestination_Webmethod", New Object() {Destination}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetShipDestination_Webmethod(ByVal asyncResult As System.IAsyncResult, ByRef Destination As clsDestination) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Destination = CType(results(1),clsDestination)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetShipDestination_WebmethodAsync(ByVal Destination As clsDestination)
            Me.GetShipDestination_WebmethodAsync(Destination, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetShipDestination_WebmethodAsync(ByVal Destination As clsDestination, ByVal userState As Object)
            If (Me.GetShipDestination_WebmethodOperationCompleted Is Nothing) Then
                Me.GetShipDestination_WebmethodOperationCompleted = AddressOf Me.OnGetShipDestination_WebmethodOperationCompleted
            End If
            Me.InvokeAsync("GetShipDestination_Webmethod", New Object() {Destination}, Me.GetShipDestination_WebmethodOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetShipDestination_WebmethodOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetShipDestination_WebmethodCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetShipDestination_WebmethodCompleted(Me, New GetShipDestination_WebmethodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/GetStandardPackDetails", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetStandardPackDetails(ByVal broadCastCode As String, ByVal container As String, ByVal labelType As String, ByVal ECL As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetStandardPackDetails", New Object() {broadCastCode, container, labelType, ECL})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetStandardPackDetails(ByVal broadCastCode As String, ByVal container As String, ByVal labelType As String, ByVal ECL As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetStandardPackDetails", New Object() {broadCastCode, container, labelType, ECL}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetStandardPackDetails(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetStandardPackDetailsAsync(ByVal broadCastCode As String, ByVal container As String, ByVal labelType As String, ByVal ECL As String)
            Me.GetStandardPackDetailsAsync(broadCastCode, container, labelType, ECL, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetStandardPackDetailsAsync(ByVal broadCastCode As String, ByVal container As String, ByVal labelType As String, ByVal ECL As String, ByVal userState As Object)
            If (Me.GetStandardPackDetailsOperationCompleted Is Nothing) Then
                Me.GetStandardPackDetailsOperationCompleted = AddressOf Me.OnGetStandardPackDetailsOperationCompleted
            End If
            Me.InvokeAsync("GetStandardPackDetails", New Object() {broadCastCode, container, labelType, ECL}, Me.GetStandardPackDetailsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetStandardPackDetailsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetStandardPackDetailsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetStandardPackDetailsCompleted(Me, New GetStandardPackDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/GetPartNumber", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPartNumber(ByVal psBroadcastCode As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetPartNumber", New Object() {psBroadcastCode})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetPartNumber(ByVal psBroadcastCode As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetPartNumber", New Object() {psBroadcastCode}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetPartNumber(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPartNumberAsync(ByVal psBroadcastCode As String)
            Me.GetPartNumberAsync(psBroadcastCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPartNumberAsync(ByVal psBroadcastCode As String, ByVal userState As Object)
            If (Me.GetPartNumberOperationCompleted Is Nothing) Then
                Me.GetPartNumberOperationCompleted = AddressOf Me.OnGetPartNumberOperationCompleted
            End If
            Me.InvokeAsync("GetPartNumber", New Object() {psBroadcastCode}, Me.GetPartNumberOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPartNumberOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPartNumberCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPartNumberCompleted(Me, New GetPartNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/GotDLOC", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GotDLOC(ByVal PartNbr As String, ByVal CNTR As String) As Object
            Dim results() As Object = Me.Invoke("GotDLOC", New Object() {PartNbr, CNTR})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Function BeginGotDLOC(ByVal PartNbr As String, ByVal CNTR As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GotDLOC", New Object() {PartNbr, CNTR}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGotDLOC(ByVal asyncResult As System.IAsyncResult) As Object
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GotDLOCAsync(ByVal PartNbr As String, ByVal CNTR As String)
            Me.GotDLOCAsync(PartNbr, CNTR, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GotDLOCAsync(ByVal PartNbr As String, ByVal CNTR As String, ByVal userState As Object)
            If (Me.GotDLOCOperationCompleted Is Nothing) Then
                Me.GotDLOCOperationCompleted = AddressOf Me.OnGotDLOCOperationCompleted
            End If
            Me.InvokeAsync("GotDLOC", New Object() {PartNbr, CNTR}, Me.GotDLOCOperationCompleted, userState)
        End Sub
        
        Private Sub OnGotDLOCOperationCompleted(ByVal arg As Object)
            If (Not (Me.GotDLOCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GotDLOCCompleted(Me, New GotDLOCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/GetOfflinePrinterName", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOfflinePrinterName(ByVal reportGroupID As Long) As String
            Dim results() As Object = Me.Invoke("GetOfflinePrinterName", New Object() {reportGroupID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetOfflinePrinterName(ByVal reportGroupID As Long, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetOfflinePrinterName", New Object() {reportGroupID}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetOfflinePrinterName(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOfflinePrinterNameAsync(ByVal reportGroupID As Long)
            Me.GetOfflinePrinterNameAsync(reportGroupID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOfflinePrinterNameAsync(ByVal reportGroupID As Long, ByVal userState As Object)
            If (Me.GetOfflinePrinterNameOperationCompleted Is Nothing) Then
                Me.GetOfflinePrinterNameOperationCompleted = AddressOf Me.OnGetOfflinePrinterNameOperationCompleted
            End If
            Me.InvokeAsync("GetOfflinePrinterName", New Object() {reportGroupID}, Me.GetOfflinePrinterNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOfflinePrinterNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOfflinePrinterNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOfflinePrinterNameCompleted(Me, New GetOfflinePrinterNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("CordialValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/GotLabels", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GotLabels(ByVal PartNbr As String, ByVal CNTR As String) As String
            Dim results() As Object = Me.Invoke("GotLabels", New Object() {PartNbr, CNTR})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGotLabels(ByVal PartNbr As String, ByVal CNTR As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GotLabels", New Object() {PartNbr, CNTR}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGotLabels(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GotLabelsAsync(ByVal PartNbr As String, ByVal CNTR As String)
            Me.GotLabelsAsync(PartNbr, CNTR, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GotLabelsAsync(ByVal PartNbr As String, ByVal CNTR As String, ByVal userState As Object)
            If (Me.GotLabelsOperationCompleted Is Nothing) Then
                Me.GotLabelsOperationCompleted = AddressOf Me.OnGotLabelsOperationCompleted
            End If
            Me.InvokeAsync("GotLabels", New Object() {PartNbr, CNTR}, Me.GotLabelsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGotLabelsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GotLabelsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GotLabelsCompleted(Me, New GotLabelsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/testWebMethods", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function testWebMethods() As Object
            Dim results() As Object = Me.Invoke("testWebMethods", New Object(-1) {})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Function BegintestWebMethods(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("testWebMethods", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndtestWebMethods(ByVal asyncResult As System.IAsyncResult) As Object
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub testWebMethodsAsync()
            Me.testWebMethodsAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub testWebMethodsAsync(ByVal userState As Object)
            If (Me.testWebMethodsOperationCompleted Is Nothing) Then
                Me.testWebMethodsOperationCompleted = AddressOf Me.OntestWebMethodsOperationCompleted
            End If
            Me.InvokeAsync("testWebMethods", New Object(-1) {}, Me.testWebMethodsOperationCompleted, userState)
        End Sub
        
        Private Sub OntestWebMethodsOperationCompleted(ByVal arg As Object)
            If (Not (Me.testWebMethodsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent testWebMethodsCompleted(Me, New testWebMethodsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("CordialValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/AbortSkid", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AbortSkid(ByVal SkidID As Long, ByVal PartNbr As String, ByVal CNTR As String) As Object
            Dim results() As Object = Me.Invoke("AbortSkid", New Object() {SkidID, PartNbr, CNTR})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Function BeginAbortSkid(ByVal SkidID As Long, ByVal PartNbr As String, ByVal CNTR As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("AbortSkid", New Object() {SkidID, PartNbr, CNTR}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndAbortSkid(ByVal asyncResult As System.IAsyncResult) As Object
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AbortSkidAsync(ByVal SkidID As Long, ByVal PartNbr As String, ByVal CNTR As String)
            Me.AbortSkidAsync(SkidID, PartNbr, CNTR, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AbortSkidAsync(ByVal SkidID As Long, ByVal PartNbr As String, ByVal CNTR As String, ByVal userState As Object)
            If (Me.AbortSkidOperationCompleted Is Nothing) Then
                Me.AbortSkidOperationCompleted = AddressOf Me.OnAbortSkidOperationCompleted
            End If
            Me.InvokeAsync("AbortSkid", New Object() {SkidID, PartNbr, CNTR}, Me.AbortSkidOperationCompleted, userState)
        End Sub
        
        Private Sub OnAbortSkidOperationCompleted(ByVal arg As Object)
            If (Not (Me.AbortSkidCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AbortSkidCompleted(Me, New AbortSkidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("CordialValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/SendEmail", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendEmail(ByVal Subject As String, ByVal priority As String, ByVal Themessage As String, ByVal Recepients As String) As String
            Dim results() As Object = Me.Invoke("SendEmail", New Object() {Subject, priority, Themessage, Recepients})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginSendEmail(ByVal Subject As String, ByVal priority As String, ByVal Themessage As String, ByVal Recepients As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SendEmail", New Object() {Subject, priority, Themessage, Recepients}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSendEmail(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendEmailAsync(ByVal Subject As String, ByVal priority As String, ByVal Themessage As String, ByVal Recepients As String)
            Me.SendEmailAsync(Subject, priority, Themessage, Recepients, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendEmailAsync(ByVal Subject As String, ByVal priority As String, ByVal Themessage As String, ByVal Recepients As String, ByVal userState As Object)
            If (Me.SendEmailOperationCompleted Is Nothing) Then
                Me.SendEmailOperationCompleted = AddressOf Me.OnSendEmailOperationCompleted
            End If
            Me.InvokeAsync("SendEmail", New Object() {Subject, priority, Themessage, Recepients}, Me.SendEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendEmailCompleted(Me, New SendEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/GetMachineID", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMachineID(ByVal MachineName As String) As String
            Dim results() As Object = Me.Invoke("GetMachineID", New Object() {MachineName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetMachineID(ByVal MachineName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetMachineID", New Object() {MachineName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetMachineID(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMachineIDAsync(ByVal MachineName As String)
            Me.GetMachineIDAsync(MachineName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMachineIDAsync(ByVal MachineName As String, ByVal userState As Object)
            If (Me.GetMachineIDOperationCompleted Is Nothing) Then
                Me.GetMachineIDOperationCompleted = AddressOf Me.OnGetMachineIDOperationCompleted
            End If
            Me.InvokeAsync("GetMachineID", New Object() {MachineName}, Me.GetMachineIDOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMachineIDOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMachineIDCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMachineIDCompleted(Me, New GetMachineIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("CordialValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/GetWhatsScheduled", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetWhatsScheduled(ByVal PartNbr As String, ByVal CNTR As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetWhatsScheduled", New Object() {PartNbr, CNTR})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetWhatsScheduled(ByVal PartNbr As String, ByVal CNTR As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetWhatsScheduled", New Object() {PartNbr, CNTR}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetWhatsScheduled(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetWhatsScheduledAsync(ByVal PartNbr As String, ByVal CNTR As String)
            Me.GetWhatsScheduledAsync(PartNbr, CNTR, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetWhatsScheduledAsync(ByVal PartNbr As String, ByVal CNTR As String, ByVal userState As Object)
            If (Me.GetWhatsScheduledOperationCompleted Is Nothing) Then
                Me.GetWhatsScheduledOperationCompleted = AddressOf Me.OnGetWhatsScheduledOperationCompleted
            End If
            Me.InvokeAsync("GetWhatsScheduled", New Object() {PartNbr, CNTR}, Me.GetWhatsScheduledOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetWhatsScheduledOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetWhatsScheduledCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetWhatsScheduledCompleted(Me, New GetWhatsScheduledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/GetSkidRecords", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSkidRecords(ByVal MachineName As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetSkidRecords", New Object() {MachineName})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetSkidRecords(ByVal MachineName As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetSkidRecords", New Object() {MachineName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetSkidRecords(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSkidRecordsAsync(ByVal MachineName As String)
            Me.GetSkidRecordsAsync(MachineName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSkidRecordsAsync(ByVal MachineName As String, ByVal userState As Object)
            If (Me.GetSkidRecordsOperationCompleted Is Nothing) Then
                Me.GetSkidRecordsOperationCompleted = AddressOf Me.OnGetSkidRecordsOperationCompleted
            End If
            Me.InvokeAsync("GetSkidRecords", New Object() {MachineName}, Me.GetSkidRecordsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSkidRecordsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSkidRecordsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSkidRecordsCompleted(Me, New GetSkidRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("CordialValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/ReprintICS", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReprintICS(ByRef SerialNbrPack() As String) As String
            Dim results() As Object = Me.Invoke("ReprintICS", New Object() {SerialNbrPack})
            SerialNbrPack = CType(results(1),String())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginReprintICS(ByVal SerialNbrPack() As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ReprintICS", New Object() {SerialNbrPack}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndReprintICS(ByVal asyncResult As System.IAsyncResult, ByRef SerialNbrPack() As String) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            SerialNbrPack = CType(results(1),String())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReprintICSAsync(ByVal SerialNbrPack() As String)
            Me.ReprintICSAsync(SerialNbrPack, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReprintICSAsync(ByVal SerialNbrPack() As String, ByVal userState As Object)
            If (Me.ReprintICSOperationCompleted Is Nothing) Then
                Me.ReprintICSOperationCompleted = AddressOf Me.OnReprintICSOperationCompleted
            End If
            Me.InvokeAsync("ReprintICS", New Object() {SerialNbrPack}, Me.ReprintICSOperationCompleted, userState)
        End Sub
        
        Private Sub OnReprintICSOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReprintICSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReprintICSCompleted(Me, New ReprintICSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("CordialValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/DeleteICSBuffer", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteICSBuffer(ByRef SerialNbrPack() As String) As String
            Dim results() As Object = Me.Invoke("DeleteICSBuffer", New Object() {SerialNbrPack})
            SerialNbrPack = CType(results(1),String())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteICSBuffer(ByVal SerialNbrPack() As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteICSBuffer", New Object() {SerialNbrPack}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteICSBuffer(ByVal asyncResult As System.IAsyncResult, ByRef SerialNbrPack() As String) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            SerialNbrPack = CType(results(1),String())
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteICSBufferAsync(ByVal SerialNbrPack() As String)
            Me.DeleteICSBufferAsync(SerialNbrPack, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteICSBufferAsync(ByVal SerialNbrPack() As String, ByVal userState As Object)
            If (Me.DeleteICSBufferOperationCompleted Is Nothing) Then
                Me.DeleteICSBufferOperationCompleted = AddressOf Me.OnDeleteICSBufferOperationCompleted
            End If
            Me.InvokeAsync("DeleteICSBuffer", New Object() {SerialNbrPack}, Me.DeleteICSBufferOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteICSBufferOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteICSBufferCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteICSBufferCompleted(Me, New DeleteICSBufferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("CordialValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/DeleteScheduledRecords", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteScheduledRecords(ByVal PartNbr As String, ByVal ECL As String, ByVal CNTR As String, ByVal PKG As String, ByVal MachineName As String, ByVal DeleteByMachineName As Boolean) As String
            Dim results() As Object = Me.Invoke("DeleteScheduledRecords", New Object() {PartNbr, ECL, CNTR, PKG, MachineName, DeleteByMachineName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDeleteScheduledRecords(ByVal PartNbr As String, ByVal ECL As String, ByVal CNTR As String, ByVal PKG As String, ByVal MachineName As String, ByVal DeleteByMachineName As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DeleteScheduledRecords", New Object() {PartNbr, ECL, CNTR, PKG, MachineName, DeleteByMachineName}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDeleteScheduledRecords(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteScheduledRecordsAsync(ByVal PartNbr As String, ByVal ECL As String, ByVal CNTR As String, ByVal PKG As String, ByVal MachineName As String, ByVal DeleteByMachineName As Boolean)
            Me.DeleteScheduledRecordsAsync(PartNbr, ECL, CNTR, PKG, MachineName, DeleteByMachineName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteScheduledRecordsAsync(ByVal PartNbr As String, ByVal ECL As String, ByVal CNTR As String, ByVal PKG As String, ByVal MachineName As String, ByVal DeleteByMachineName As Boolean, ByVal userState As Object)
            If (Me.DeleteScheduledRecordsOperationCompleted Is Nothing) Then
                Me.DeleteScheduledRecordsOperationCompleted = AddressOf Me.OnDeleteScheduledRecordsOperationCompleted
            End If
            Me.InvokeAsync("DeleteScheduledRecords", New Object() {PartNbr, ECL, CNTR, PKG, MachineName, DeleteByMachineName}, Me.DeleteScheduledRecordsOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteScheduledRecordsOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteScheduledRecordsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteScheduledRecordsCompleted(Me, New DeleteScheduledRecordsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/GetMESPartId", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetMESPartId(ByVal psPartNumber As String, ByVal psUniqueFeature As String) As String
            Dim results() As Object = Me.Invoke("GetMESPartId", New Object() {psPartNumber, psUniqueFeature})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetMESPartId(ByVal psPartNumber As String, ByVal psUniqueFeature As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetMESPartId", New Object() {psPartNumber, psUniqueFeature}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetMESPartId(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetMESPartIdAsync(ByVal psPartNumber As String, ByVal psUniqueFeature As String)
            Me.GetMESPartIdAsync(psPartNumber, psUniqueFeature, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetMESPartIdAsync(ByVal psPartNumber As String, ByVal psUniqueFeature As String, ByVal userState As Object)
            If (Me.GetMESPartIdOperationCompleted Is Nothing) Then
                Me.GetMESPartIdOperationCompleted = AddressOf Me.OnGetMESPartIdOperationCompleted
            End If
            Me.InvokeAsync("GetMESPartId", New Object() {psPartNumber, psUniqueFeature}, Me.GetMESPartIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetMESPartIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetMESPartIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetMESPartIdCompleted(Me, New GetMESPartIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/ShowVersion", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ShowVersion() As Object
            Dim results() As Object = Me.Invoke("ShowVersion", New Object(-1) {})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Function BeginShowVersion(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ShowVersion", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndShowVersion(ByVal asyncResult As System.IAsyncResult) As Object
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ShowVersionAsync()
            Me.ShowVersionAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ShowVersionAsync(ByVal userState As Object)
            If (Me.ShowVersionOperationCompleted Is Nothing) Then
                Me.ShowVersionOperationCompleted = AddressOf Me.OnShowVersionOperationCompleted
            End If
            Me.InvokeAsync("ShowVersion", New Object(-1) {}, Me.ShowVersionOperationCompleted, userState)
        End Sub
        
        Private Sub OnShowVersionOperationCompleted(ByVal arg As Object)
            If (Not (Me.ShowVersionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ShowVersionCompleted(Me, New ShowVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/EnterLog", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EnterLog(ByVal LogType As logTypes, ByVal logMessage As String) As Object
            Dim results() As Object = Me.Invoke("EnterLog", New Object() {LogType, logMessage})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Function BeginEnterLog(ByVal LogType As logTypes, ByVal logMessage As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("EnterLog", New Object() {LogType, logMessage}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndEnterLog(ByVal asyncResult As System.IAsyncResult) As Object
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EnterLogAsync(ByVal LogType As logTypes, ByVal logMessage As String)
            Me.EnterLogAsync(LogType, logMessage, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EnterLogAsync(ByVal LogType As logTypes, ByVal logMessage As String, ByVal userState As Object)
            If (Me.EnterLogOperationCompleted Is Nothing) Then
                Me.EnterLogOperationCompleted = AddressOf Me.OnEnterLogOperationCompleted
            End If
            Me.InvokeAsync("EnterLog", New Object() {LogType, logMessage}, Me.EnterLogOperationCompleted, userState)
        End Sub
        
        Private Sub OnEnterLogOperationCompleted(ByVal arg As Object)
            If (Not (Me.EnterLogCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EnterLogCompleted(Me, New EnterLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/SaveInpectionRecord", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveInpectionRecord(ByRef ds As System.Data.DataSet) As String
            Dim results() As Object = Me.Invoke("SaveInpectionRecord", New Object() {ds})
            ds = CType(results(1),System.Data.DataSet)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginSaveInpectionRecord(ByVal ds As System.Data.DataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SaveInpectionRecord", New Object() {ds}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSaveInpectionRecord(ByVal asyncResult As System.IAsyncResult, ByRef ds As System.Data.DataSet) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            ds = CType(results(1),System.Data.DataSet)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveInpectionRecordAsync(ByVal ds As System.Data.DataSet)
            Me.SaveInpectionRecordAsync(ds, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveInpectionRecordAsync(ByVal ds As System.Data.DataSet, ByVal userState As Object)
            If (Me.SaveInpectionRecordOperationCompleted Is Nothing) Then
                Me.SaveInpectionRecordOperationCompleted = AddressOf Me.OnSaveInpectionRecordOperationCompleted
            End If
            Me.InvokeAsync("SaveInpectionRecord", New Object() {ds}, Me.SaveInpectionRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveInpectionRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveInpectionRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveInpectionRecordCompleted(Me, New SaveInpectionRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/GetQualityProblemCodes", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetQualityProblemCodes(ByRef Result1 As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetQualityProblemCodes", New Object() {Result1})
            Result1 = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetQualityProblemCodes(ByVal Result1 As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetQualityProblemCodes", New Object() {Result1}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetQualityProblemCodes(ByVal asyncResult As System.IAsyncResult, ByRef Result1 As String) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Result1 = CType(results(1),String)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetQualityProblemCodesAsync(ByVal Result1 As String)
            Me.GetQualityProblemCodesAsync(Result1, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetQualityProblemCodesAsync(ByVal Result1 As String, ByVal userState As Object)
            If (Me.GetQualityProblemCodesOperationCompleted Is Nothing) Then
                Me.GetQualityProblemCodesOperationCompleted = AddressOf Me.OnGetQualityProblemCodesOperationCompleted
            End If
            Me.InvokeAsync("GetQualityProblemCodes", New Object() {Result1}, Me.GetQualityProblemCodesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetQualityProblemCodesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetQualityProblemCodesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetQualityProblemCodesCompleted(Me, New GetQualityProblemCodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/RunsAt", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RunsAt() As String
            Dim results() As Object = Me.Invoke("RunsAt", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginRunsAt(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("RunsAt", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndRunsAt(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RunsAtAsync()
            Me.RunsAtAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RunsAtAsync(ByVal userState As Object)
            If (Me.RunsAtOperationCompleted Is Nothing) Then
                Me.RunsAtOperationCompleted = AddressOf Me.OnRunsAtOperationCompleted
            End If
            Me.InvokeAsync("RunsAt", New Object(-1) {}, Me.RunsAtOperationCompleted, userState)
        End Sub
        
        Private Sub OnRunsAtOperationCompleted(ByVal arg As Object)
            If (Not (Me.RunsAtCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RunsAtCompleted(Me, New RunsAtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapHeaderAttribute("CordialValue"),  _
         System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BecWebService/RequestLabel/UnReserveSerials", RequestNamespace:="http://tempuri.org/BecWebService/RequestLabel", ResponseNamespace:="http://tempuri.org/BecWebService/RequestLabel", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UnReserveSerials(ByVal Machine_Name As String) As String
            Dim results() As Object = Me.Invoke("UnReserveSerials", New Object() {Machine_Name})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginUnReserveSerials(ByVal Machine_Name As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UnReserveSerials", New Object() {Machine_Name}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUnReserveSerials(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UnReserveSerialsAsync(ByVal Machine_Name As String)
            Me.UnReserveSerialsAsync(Machine_Name, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UnReserveSerialsAsync(ByVal Machine_Name As String, ByVal userState As Object)
            If (Me.UnReserveSerialsOperationCompleted Is Nothing) Then
                Me.UnReserveSerialsOperationCompleted = AddressOf Me.OnUnReserveSerialsOperationCompleted
            End If
            Me.InvokeAsync("UnReserveSerials", New Object() {Machine_Name}, Me.UnReserveSerialsOperationCompleted, userState)
        End Sub
        
        Private Sub OnUnReserveSerialsOperationCompleted(ByVal arg As Object)
            If (Not (Me.UnReserveSerialsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UnReserveSerialsCompleted(Me, New UnReserveSerialsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/BecWebService/RequestLabel"),  _
     System.Xml.Serialization.XmlRootAttribute([Namespace]:="http://tempuri.org/BecWebService/RequestLabel", IsNullable:=false)>  _
    Partial Public Class Cordial
        Inherits System.Web.Services.Protocols.SoapHeader
        
        Private userIDField As String
        
        Private passwordField As String
        
        Private anyAttrField() As System.Xml.XmlAttribute
        
        '''<remarks/>
        Public Property UserID() As String
            Get
                Return Me.userIDField
            End Get
            Set
                Me.userIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Password() As String
            Get
                Return Me.passwordField
            End Get
            Set
                Me.passwordField = value
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlAnyAttributeAttribute()>  _
        Public Property AnyAttr() As System.Xml.XmlAttribute()
            Get
                Return Me.anyAttrField
            End Get
            Set
                Me.anyAttrField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/BecWebService/RequestLabel")>  _
    Partial Public Class clsDestination
        
        Private locationField As String
        
        Private mes_part_idField As Long
        
        Private machineNameField As String
        
        Private part_nbrField As String
        
        Private scheduleIDField As Long
        
        Private mes_machine_idField As Long
        
        Private revision_PhysicalField As String
        
        Private cNTRField As String
        
        Private package_CodeField As String
        
        Private qtyPkgsperSkidReqField As Long
        
        Private qtyPkgsUsedField As Long
        
        Private controlFlagField As String
        
        Private completedField As Boolean
        
        Private matIDField As String
        
        Private serialNbrField As String
        
        Private useGenericField As Boolean
        
        Private qtyPiecesField As Short
        
        Private lookForField As String
        
        '''<remarks/>
        Public Property location() As String
            Get
                Return Me.locationField
            End Get
            Set
                Me.locationField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property mes_part_id() As Long
            Get
                Return Me.mes_part_idField
            End Get
            Set
                Me.mes_part_idField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MachineName() As String
            Get
                Return Me.machineNameField
            End Get
            Set
                Me.machineNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Part_nbr() As String
            Get
                Return Me.part_nbrField
            End Get
            Set
                Me.part_nbrField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ScheduleID() As Long
            Get
                Return Me.scheduleIDField
            End Get
            Set
                Me.scheduleIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property mes_machine_id() As Long
            Get
                Return Me.mes_machine_idField
            End Get
            Set
                Me.mes_machine_idField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Revision_Physical() As String
            Get
                Return Me.revision_PhysicalField
            End Get
            Set
                Me.revision_PhysicalField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property CNTR() As String
            Get
                Return Me.cNTRField
            End Get
            Set
                Me.cNTRField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Package_Code() As String
            Get
                Return Me.package_CodeField
            End Get
            Set
                Me.package_CodeField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property QtyPkgsperSkidReq() As Long
            Get
                Return Me.qtyPkgsperSkidReqField
            End Get
            Set
                Me.qtyPkgsperSkidReqField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property QtyPkgsUsed() As Long
            Get
                Return Me.qtyPkgsUsedField
            End Get
            Set
                Me.qtyPkgsUsedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property ControlFlag() As String
            Get
                Return Me.controlFlagField
            End Get
            Set
                Me.controlFlagField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property Completed() As Boolean
            Get
                Return Me.completedField
            End Get
            Set
                Me.completedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property MatID() As String
            Get
                Return Me.matIDField
            End Get
            Set
                Me.matIDField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property SerialNbr() As String
            Get
                Return Me.serialNbrField
            End Get
            Set
                Me.serialNbrField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property UseGeneric() As Boolean
            Get
                Return Me.useGenericField
            End Get
            Set
                Me.useGenericField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property QtyPieces() As Short
            Get
                Return Me.qtyPiecesField
            End Get
            Set
                Me.qtyPiecesField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property LookFor() As String
            Get
                Return Me.lookForField
            End Get
            Set
                Me.lookForField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/BecWebService/RequestLabel")>  _
    Public Enum logTypes
        
        '''<remarks/>
        Reprint
        
        '''<remarks/>
        AbortSkid
        
        '''<remarks/>
        DeleteSchedule
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub GetSAPLabelDataCompletedEventHandler(ByVal sender As Object, ByVal e As GetSAPLabelDataCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSAPLabelDataCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub PrintLabel_P23CompletedEventHandler(ByVal sender As Object, ByVal e As PrintLabel_P23CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintLabel_P23CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub ViewErrorLogCompletedEventHandler(ByVal sender As Object, ByVal e As ViewErrorLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ViewErrorLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub saveSerializedProductsCompletedEventHandler(ByVal sender As Object, ByVal e As saveSerializedProductsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class saveSerializedProductsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub LogEventsCompletedEventHandler(ByVal sender As Object, ByVal e As LogEventsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LogEventsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub PrintSkidSummaryOnlyCompletedEventHandler(ByVal sender As Object, ByVal e As PrintSkidSummaryOnlyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintSkidSummaryOnlyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub ConvertToCustomerPartNumbertttCompletedEventHandler(ByVal sender As Object, ByVal e As ConvertToCustomerPartNumbertttCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConvertToCustomerPartNumbertttCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub PrintSkidSummaryCompletedEventHandler(ByVal sender As Object, ByVal e As PrintSkidSummaryCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PrintSkidSummaryCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub RequiresSkidCompletedEventHandler(ByVal sender As Object, ByVal e As RequiresSkidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RequiresSkidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub GetShipDestination_WebmethodCompletedEventHandler(ByVal sender As Object, ByVal e As GetShipDestination_WebmethodCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetShipDestination_WebmethodCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Destination() As clsDestination
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),clsDestination)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub GetStandardPackDetailsCompletedEventHandler(ByVal sender As Object, ByVal e As GetStandardPackDetailsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetStandardPackDetailsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub GetPartNumberCompletedEventHandler(ByVal sender As Object, ByVal e As GetPartNumberCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPartNumberCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub GotDLOCCompletedEventHandler(ByVal sender As Object, ByVal e As GotDLOCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GotDLOCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub GetOfflinePrinterNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetOfflinePrinterNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOfflinePrinterNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub GotLabelsCompletedEventHandler(ByVal sender As Object, ByVal e As GotLabelsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GotLabelsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub testWebMethodsCompletedEventHandler(ByVal sender As Object, ByVal e As testWebMethodsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class testWebMethodsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub AbortSkidCompletedEventHandler(ByVal sender As Object, ByVal e As AbortSkidCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AbortSkidCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub SendEmailCompletedEventHandler(ByVal sender As Object, ByVal e As SendEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub GetMachineIDCompletedEventHandler(ByVal sender As Object, ByVal e As GetMachineIDCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMachineIDCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub GetWhatsScheduledCompletedEventHandler(ByVal sender As Object, ByVal e As GetWhatsScheduledCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetWhatsScheduledCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub GetSkidRecordsCompletedEventHandler(ByVal sender As Object, ByVal e As GetSkidRecordsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSkidRecordsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub ReprintICSCompletedEventHandler(ByVal sender As Object, ByVal e As ReprintICSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReprintICSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property SerialNbrPack() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub DeleteICSBufferCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteICSBufferCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteICSBufferCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property SerialNbrPack() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub DeleteScheduledRecordsCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteScheduledRecordsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteScheduledRecordsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub GetMESPartIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetMESPartIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetMESPartIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub ShowVersionCompletedEventHandler(ByVal sender As Object, ByVal e As ShowVersionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ShowVersionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub EnterLogCompletedEventHandler(ByVal sender As Object, ByVal e As EnterLogCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EnterLogCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub SaveInpectionRecordCompletedEventHandler(ByVal sender As Object, ByVal e As SaveInpectionRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveInpectionRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property ds() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),System.Data.DataSet)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub GetQualityProblemCodesCompletedEventHandler(ByVal sender As Object, ByVal e As GetQualityProblemCodesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetQualityProblemCodesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Data.DataSet
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Data.DataSet)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property Result1() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub RunsAtCompletedEventHandler(ByVal sender As Object, ByVal e As RunsAtCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RunsAtCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0")>  _
    Public Delegate Sub UnReserveSerialsCompletedEventHandler(ByVal sender As Object, ByVal e As UnReserveSerialsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3062.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UnReserveSerialsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
